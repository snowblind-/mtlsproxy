#TMSH-VERSION: 17.1.0
# This sample configuration requires you first to provide: 
#   The server TLS certificate and key from a trusted CA
#   The trusted CA certificate for the server SSL certificate 
#   The trusted CA certificate for the client SSL certificates
#
# For this sake of this configuration it assumes:
#   The BIG-IP is deployed in 1-nic mode where the BIG-IP management and dataplane share an
#   interface.
#
#   The names for each to be the following components are as follows:
#       CA for server certificate:             
#            cert /Common/proxy
#            key /Common/proxy
#            chain /Common/ca
#
#       client-cert-ca: 
#           /Common/ca
# Since these are all self generated and signed I used the same ca for issuing both the 
# client and server certificates and keys
# 
# Once the above is complete and the locally significant fields [[indicated by double brackets]] 
# below are changed, install this in '/var/local/scf/' and issue the following commands
# load /sys config merge file <filename> verify
#
# If no errors then fully merge the file.
# tmsh load /sys config merge file <filename> 
# and
# tmsh save /sys config
#
# To create your own CA and client and server certificates for testing

cli admin-partitions {
    update-partition Common
}

ltm rule /Common/mtlsExplicit {
when RULE_INIT {
  #set 1 to enable logging, 0 to disable
  set static::debug 1
  set tag none
}

when CLIENTSSL_CLIENTCERT {
    if {[SSL::cert 0] eq ""}{
         reject 
    } else { 
        set subject [X509::subject [SSL::cert 0]]
        # Set the group variable to the first 3 digits of the certificates
        # This is controlled by the last statement '] 0 2 ]' below. If you wish to extend it 
        # the lindex starts at the '0' character and ends at (n-1) characters you wish to extract
        # For this you must also create a data group of allowed destinations where the datagroup
        # name is the $group you are planning to match against ('app')
        set group [string range [lindex [split [lindex [split [lindex [split $subject ","] 4] "="] 1] "."] 0] 0 2]
        if {$static::debug}{ log local0. "Group name extracted from Subject CN= $group" }
    }
}

when HTTP_PROXY_REQUEST {
    if { [HTTP::method] eq "CONNECT" } {
        # Extract the destination from the request (host:port)
        set destination [lindex [split [HTTP::uri] ":"] 0]
        if {$static::debug}{ log local0. "Extracted destination: $destination" }
        
        # Query the Data Group for the website name
        set result [class match -value $destination eq $group]
        
        if { $result == "allow" } {
        # Website is allowed, proceed with the request
            if {$static::debug}{ log local0. "Allowed destination: $destination for Subject: $subject" }
        } else {
        # Website is not allowed, block the request and log the Client Certificate Subject and Destination
            log local0. "Denied destination: $destination for Subject: $subject"
            reject
        }
    }
}
}
ltm virtual /Common/explicitProxy {
    destination /Common/0.0.0.0:3128
    ip-protocol tcp
    mask any
    profiles {
        /Common/mtlsExplicit { }
        /Common/proxy.cloudsecurity.ninja {
            context clientside
        }
        /Common/tcp { }
    }
    rules {
        /Common/mtlsExplicit
    }
    serverssl-use-sni disabled
    source 0.0.0.0/0
    source-address-translation {
        type automap
    }
    translate-address enabled
    translate-port enabled
}
ltm virtual-address /Common/0.0.0.0 {
    address any
    arp disabled
    icmp-echo disabled
    mask any
    traffic-group /Common/traffic-group-1
}

ltm cipher group /Common/explicitProxy {
    allow {
        /Common/f5-aes { }
        /Common/f5-cc-stip { }
        /Common/f5-default { }
        /Common/f5-ecc { }
        /Common/f5-fips { }
        /Common/f5-quic { }
        /Common/f5-secure { }
    }
    ordering speed
}

ltm data-group internal /Common/app {
    records {
        www.google.com {
            data allow
        }
        www.https.com {
            data allow
        }
    }
    type string
}

ltm profile client-ssl /Common/[[SSL PROFILE name]] {
    alert-timeout indefinite
    allow-dynamic-record-sizing disabled
    allow-expired-crl disabled
    allow-non-ssl disabled
    app-service none
    authenticate once
    authenticate-depth 9
    ca-file /Common/ca
    cache-size 262144
    cache-timeout 3600
    cert-key-chain {
        proxy_ca_0 {
            cert /Common/proxy
            chain /Common/ca
            key /Common/proxy
        }
    }
    cipher-group /Common/explicitProxy
    ciphers none
    client-cert-ca /Common/ca
    crl none
    crl-file none
    data-0rtt disabled
    defaults-from /Common/clientssl
    generic-alert enabled
    handshake-timeout 10
    inherit-ca-certkeychain true
    inherit-certkeychain false
    max-active-handshakes indefinite
    max-aggregate-renegotiation-per-minute indefinite
    max-renegotiations-per-minute 5
    maximum-record-size 16384
    mod-ssl-methods disabled
    mode enabled
    notify-cert-status-to-virtual-server disabled
    ocsp-stapling disabled
    options { dont-insert-empty-fragments no-dtlsv1.2 }
    peer-cert-mode require
    peer-no-renegotiate-timeout 10
    proxy-ssl disabled
    proxy-ssl-passthrough disabled
    renegotiate-max-record-delay indefinite
    renegotiate-period indefinite
    renegotiate-size indefinite
    renegotiation enabled
    retain-certificate true
    secure-renegotiation require
    server-name none
    session-mirroring disabled
    session-ticket disabled
    session-ticket-timeout 0
    sni-default false
    sni-require false
    ssl-sign-hash any
    strict-resume disabled
    unclean-shutdown enabled
}

ltm profile http /Common/mtlsExplicit {
    app-service none
    defaults-from /Common/http-explicit
    explicit-proxy {
        default-connect-handling allow
        dns-resolver /Common/everything
    }
    proxy-type explicit
}

net dns-resolver /Common/everything {
    forward-zones {
        . {
            nameservers {
            [[DNS SERVER IP]]:53 { }
            }
        }
    }
    nameserver-min-rtt 500
    route-domain /Common/0
}

